<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="txt_Status.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEA
        AAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEA
        AAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIA
        AAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIA
        AAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIA
        AAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIA
        AAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAARERCAFJVVAA9OjsAPTo7AD06
        OgA9OjoAPTo6AD06OgA9OjoAPTo6AD06OgA+PD0AUlNTAAAAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIA
        AAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAD89vEAq52Qs4x2
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiIeIAHRydACNjY0ARUVFAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////gAf//4AH4AGAB+ABxw/gAcMQ
        AAHiEAAB4DAAAfA4AAHwf///8H///+A/+D/gH/A/4A/w/+AH8J/gAcAf8AAAH/yAAD//8Af///wf///8
        H/////////////////////////////////8=
</value>
  </data>
</root>